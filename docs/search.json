[
  {
    "objectID": "Project1.html",
    "href": "Project1.html",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "This function is taking in a dataset and has a default arugment of “Enrollment”. It then creates a new data frame called new_df and selects only the columns called Area_name, STCOU, and any column ending with D. It is renaming the Area_name column as area_name and pivoting longer on columns 3 through 12. It is taking the names to “time” and the values_to the values column as given by the argument. It is also removing outliers. Based on this secondary source https://fred.stlouisfed.org/series/NYKING7POP, it appears that the population jump of over 7 million in Kings, NY in 1992 was a data entry error and therefore this data point was removed as well. It returns the new_df.\n\ntidy_data &lt;- function(data, values = \"Enrollment\"){\n  new_df &lt;- data |&gt;\n    #Select only certain columns\n    select(Area_name, STCOU, ends_with(\"D\")) |&gt;\n    #Rename Area_name column.\n    rename(area_name = Area_name) |&gt;\n    #Pivot longer to a column called values (input argument)\n    pivot_longer(cols = 3:12,\n               names_to = \"time\",\n               values_to = values) |&gt;\n    #Remove missing values\n    filter(get(values) != 0) |&gt;\n    #Remove invalid data point in Population dataset.\n    filter(!(area_name == \"Kings, NY\" & get(values) &gt; 7000000))\n  \n  return(new_df)\n}\n\n\n\n\nThis is a function called add_year that takes in new_df (the output of the previous function). It initializes a numeric vector of length of the number of rows of the input, new_df. Then, using a for loop it loops through all iterations of the time column of the new_df and takes the 8th and 9th strings. Then it takes that value and converts it to a numeric variable. Then, if that number is less than 20, it adds 2000 so for example if the number was 03 it would change to 2003. Otherwise, add 1900 to get something like 1997. Since there are no data values in the 1920s or earlier, this pattern will hold. It is storing each of these values in the initial vector created.\n\nadd_year &lt;- function(new_df){\n  #Initialize numeric vector of length of number of rows.\n  Year_Date &lt;- numeric(nrow(new_df))\n  #Create a for loop.\n  for(i in seq_along(new_df$time)){\n    time_year &lt;- substr(new_df$time[i],8,9)\n    year_numeric &lt;- as.numeric(time_year)\n  \n    year_numeric &lt;- ifelse(year_numeric &lt; 20, \n                       year_numeric + 2000, \n                       year_numeric + 1900) \n    #Store in Year_Date\n    Year_Date[i] &lt;- year_numeric\n}\n  #Initialize a new character vector called measurement.\n  measurement &lt;- character(nrow(new_df))\n  #Loop through the time column of new_df and pulls strings 1-7.\nfor(i in seq_along(new_df$time)){\n  measurement_type &lt;- substr(new_df$time[i], 1, 7)\n  #Stores those values in measurement vector.\n  measurement[i] &lt;- measurement_type\n}\nnew_df |&gt;\n  #Adds columns for Year_Date and Measurement.\n  mutate(Year_Date = Year_Date,\n         Measurement = measurement) |&gt;\n  #Gets rid of the time column since that is no longer needed.\n  select(-time)\n}\n\n\n\n\nThis creates a function called add_state that first creates a character vector called state_name that is the length of the number of rows in the inputted data set. Then, it loops through the area_name column and creates a new vector called state_info that takes the area_name column and looks at the second to last string and the last string there. Then it stores each of these in the ith element of the state_name character vector initially created. It returns the initial data set with an added column called State.\n\nadd_state&lt;- function(input){\n  #Initalize character vector called state_name.\n  state_name &lt;- character(nrow(input))\n  #Loop through area_name column and extract last two strings.\n  for(i in seq_along(input$area_name)){\n    state_info &lt;- substr(input$area_name[i], \n                       nchar(input$area_name[i]) -1, \n                       nchar(input$area_name[i]))\n  #Store in state_name \n  state_name[i] &lt;- state_info\n  }\n  return(input |&gt;\n    #Add column corresponding to 2 character string of state name.\n    mutate(State = state_name))\n}\n\n\n\n\nThis function is called add_division. It takes the data_input and adds a column called Division. This uses a vectorized function ifelse to assign different states to different divisions. If the area_name doesn’t match any of the states (such as in the case of United States), it is denoted as error. Finally, it removes the extra DC rows.\n\nadd_division &lt;- function(data_input){\n  data_input &lt;- data_input |&gt;\n    #Add column corresponding to division.\n    mutate(Division = \n       ifelse(area_name %in% c(\"CONNECTICUT\", \"MAINE\", \"MASSACHUSETTS\", \"NEW HAMPSHIRE\", \"RHODE ISLAND\", \"VERMONT\"), \"New England\", \n        ifelse(area_name %in% c(\"NEW JERSEY\", \"NEW YORK\", \"PENNSYLVANIA\"), \"Middle Atlantic\",\n          ifelse(area_name %in% c(\"ILLINOIS\", \"INDIANA\", \"MICHIGAN\", \"OHIO\", \"WISCONSIN\"), \"East North Central\",\n            ifelse(area_name %in% c(\"IOWA\", \"KANSAS\", \"MINNESOTA\", \"MISSOURI\", \"NEBRASKA\", \"NORTH DAKOTA\", \"SOUTH DAKOTA\"), \"West North Central\",\n              ifelse(area_name %in% c(\"DELAWARE\", \"FLORIDA\", \"GEORGIA\", \"MARYLAND\", \"NORTH CAROLINA\", \"SOUTH CAROLINA\", \"VIRGINIA\", \"DISTRICT OF COLUMBIA\", \"District of Columbia\", \"WEST VIRGINIA\"), \"South Atlantic\",\n                ifelse(area_name %in% c(\"ALABAMA\", \"KENTUCKY\", \"MISSISSIPPI\", \"TENNESSEE\"), \"East South Central\",\n                  ifelse(area_name %in% c(\"ARKANSAS\", \"LOUISIANA\", \"OKLAHOMA\", \"TEXAS\"), \"West South Central\",\n                    ifelse(area_name %in% c(\"ARIZONA\", \"COLORADO\", \"IDAHO\", \"MONTANA\", \"NEVADA\", \"NEW MEXICO\", \"UTAH\", \"WYOMING\"), \"Mountain\",\n                      ifelse(area_name %in% c(\"ALASKA\", \"CALIFORNIA\", \"HAWAII\", \"OREGON\", \"WASHINGTON\"), \"Pacific\",\n                        \"Error\")))))))))) |&gt;\n  #Remove extra DC rows.\n  filter((area_name != \"District of Columbia\"))\n  \n  #Return the data input with the removed rows and the new Division column.\n  return(data_input)\n}\n\n\n\n\nThis function first creates a vector called county_indices that looks for the pattern such as Wake, NC where the first part corresponds to the county and the last two to the state. Then it filters to only look at the row numbers in the county indices and assigns that to a tibble called county_data. Finally it assigns a class called county. Then it applies the add_state function above to the county tibble to create a new tibble called add_state_info.\n\nget_new_tibbles &lt;- function(input_data){\n  #Create county_indices vector looking for pattern.\n  county_indices &lt;- grep(pattern = \", \\\\w\\\\w\", input_data$area_name)\n  \n  #Store as county data only those row numbers that follow pattern.\n  county_data &lt;- input_data |&gt;\n  filter(row_number() %in% county_indices)\n  \n  #Add a class called county.\n  class(county_data) &lt;- c(\"county\", class(county_data))\n\n  #Call add_state function (Step 5) \n  add_state_info &lt;-add_state(county_data)\n \n  #Store as non_county_data those row numbers that don't follow pattern above.\n  non_county_data &lt;- input_data |&gt;\n  filter(!row_number() %in% county_indices)\n\n  #Add a class called state.\n  class(non_county_data) &lt;- c(\"state\", class(non_county_data))\n\n  #Call add_division function.\n  add_division_info &lt;- add_division(non_county_data)\n\n#Return a list of two tibbles.\nreturn(list(\"County Data\" = add_state_info, \"Non-County Data\" = add_division_info))\n}\n\n\n\n\nThis creates the wrapper function called wrapper_function that has the default values argument of “Enrollment” and passes this argument to the tidy_data function. It calls each function in order and returns a list with the two tibbles.\n\nwrap_all &lt;- function(url, values = \"Enrollment\"){\n  result &lt;- read_csv(url) |&gt;\n    tidy_data(values) |&gt;\n    add_year() |&gt;\n    get_new_tibbles()\n}\n\n\n\n\nCall the function for the A dataset and name it edu_a. Then print out the list of two tibbles for A. Call the function for the B dataset and name it edu_b. Then print out the list of two tibbles for B.\n\nedu_a &lt;- wrap_all(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\")\nedu_a\n\n$`County Data`\n# A tibble: 31,225 × 6\n   area_name   STCOU Enrollment Year_Date Measurement State\n   &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;\n 1 Autauga, AL 01001       6829      1987 EDU0101     AL   \n 2 Autauga, AL 01001       6900      1988 EDU0101     AL   \n 3 Autauga, AL 01001       6920      1989 EDU0101     AL   \n 4 Autauga, AL 01001       6847      1990 EDU0101     AL   \n 5 Autauga, AL 01001       7008      1991 EDU0101     AL   \n 6 Autauga, AL 01001       7137      1992 EDU0101     AL   \n 7 Autauga, AL 01001       7152      1993 EDU0101     AL   \n 8 Autauga, AL 01001       7381      1994 EDU0101     AL   \n 9 Autauga, AL 01001       7568      1995 EDU0101     AL   \n10 Autauga, AL 01001       7834      1996 EDU0101     AL   \n# ℹ 31,215 more rows\n\n$`Non-County Data`\n# A tibble: 520 × 6\n   area_name     STCOU Enrollment Year_Date Measurement Division\n   &lt;chr&gt;         &lt;chr&gt;      &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;   \n 1 UNITED STATES 00000   40024299      1987 EDU0101     Error   \n 2 UNITED STATES 00000   39967624      1988 EDU0101     Error   \n 3 UNITED STATES 00000   40317775      1989 EDU0101     Error   \n 4 UNITED STATES 00000   40737600      1990 EDU0101     Error   \n 5 UNITED STATES 00000   41385442      1991 EDU0101     Error   \n 6 UNITED STATES 00000   42088151      1992 EDU0101     Error   \n 7 UNITED STATES 00000   42724710      1993 EDU0101     Error   \n 8 UNITED STATES 00000   43369917      1994 EDU0101     Error   \n 9 UNITED STATES 00000   43993459      1995 EDU0101     Error   \n10 UNITED STATES 00000   44715737      1996 EDU0101     Error   \n# ℹ 510 more rows\n\nedu_b &lt;- wrap_all(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv\")\nedu_b\n\n$`County Data`\n# A tibble: 31,200 × 6\n   area_name   STCOU Enrollment Year_Date Measurement State\n   &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;\n 1 Autauga, AL 01001       8099      1997 EDU0101     AL   \n 2 Autauga, AL 01001       8211      1998 EDU0101     AL   \n 3 Autauga, AL 01001       8489      1999 EDU0101     AL   \n 4 Autauga, AL 01001       8912      2000 EDU0102     AL   \n 5 Autauga, AL 01001       8626      2001 EDU0102     AL   \n 6 Autauga, AL 01001       8762      2002 EDU0102     AL   \n 7 Autauga, AL 01001       9105      2003 EDU0152     AL   \n 8 Autauga, AL 01001       9200      2004 EDU0152     AL   \n 9 Autauga, AL 01001       9559      2005 EDU0152     AL   \n10 Autauga, AL 01001       9652      2006 EDU0152     AL   \n# ℹ 31,190 more rows\n\n$`Non-County Data`\n# A tibble: 519 × 6\n   area_name     STCOU Enrollment Year_Date Measurement Division\n   &lt;chr&gt;         &lt;chr&gt;      &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;   \n 1 UNITED STATES 00000   44534459      1997 EDU0101     Error   \n 2 UNITED STATES 00000   46245814      1998 EDU0101     Error   \n 3 UNITED STATES 00000   46368903      1999 EDU0101     Error   \n 4 UNITED STATES 00000   46818690      2000 EDU0102     Error   \n 5 UNITED STATES 00000   47127066      2001 EDU0102     Error   \n 6 UNITED STATES 00000   47606570      2002 EDU0102     Error   \n 7 UNITED STATES 00000   48506317      2003 EDU0152     Error   \n 8 UNITED STATES 00000   48693287      2004 EDU0152     Error   \n 9 UNITED STATES 00000   48978555      2005 EDU0152     Error   \n10 UNITED STATES 00000   49140702      2006 EDU0152     Error   \n# ℹ 509 more rows"
  },
  {
    "objectID": "Project1.html#steps-1-2-function",
    "href": "Project1.html#steps-1-2-function",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "This function is taking in a dataset and has a default arugment of “Enrollment”. It then creates a new data frame called new_df and selects only the columns called Area_name, STCOU, and any column ending with D. It is renaming the Area_name column as area_name and pivoting longer on columns 3 through 12. It is taking the names to “time” and the values_to the values column as given by the argument. It is also removing outliers. Based on this secondary source https://fred.stlouisfed.org/series/NYKING7POP, it appears that the population jump of over 7 million in Kings, NY in 1992 was a data entry error and therefore this data point was removed as well. It returns the new_df.\n\ntidy_data &lt;- function(data, values = \"Enrollment\"){\n  new_df &lt;- data |&gt;\n    #Select only certain columns\n    select(Area_name, STCOU, ends_with(\"D\")) |&gt;\n    #Rename Area_name column.\n    rename(area_name = Area_name) |&gt;\n    #Pivot longer to a column called values (input argument)\n    pivot_longer(cols = 3:12,\n               names_to = \"time\",\n               values_to = values) |&gt;\n    #Remove missing values\n    filter(get(values) != 0) |&gt;\n    #Remove invalid data point in Population dataset.\n    filter(!(area_name == \"Kings, NY\" & get(values) &gt; 7000000))\n  \n  return(new_df)\n}"
  },
  {
    "objectID": "Project1.html#step-3-function",
    "href": "Project1.html#step-3-function",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "This is a function called add_year that takes in new_df (the output of the previous function). It initializes a numeric vector of length of the number of rows of the input, new_df. Then, using a for loop it loops through all iterations of the time column of the new_df and takes the 8th and 9th strings. Then it takes that value and converts it to a numeric variable. Then, if that number is less than 20, it adds 2000 so for example if the number was 03 it would change to 2003. Otherwise, add 1900 to get something like 1997. Since there are no data values in the 1920s or earlier, this pattern will hold. It is storing each of these values in the initial vector created.\n\nadd_year &lt;- function(new_df){\n  #Initialize numeric vector of length of number of rows.\n  Year_Date &lt;- numeric(nrow(new_df))\n  #Create a for loop.\n  for(i in seq_along(new_df$time)){\n    time_year &lt;- substr(new_df$time[i],8,9)\n    year_numeric &lt;- as.numeric(time_year)\n  \n    year_numeric &lt;- ifelse(year_numeric &lt; 20, \n                       year_numeric + 2000, \n                       year_numeric + 1900) \n    #Store in Year_Date\n    Year_Date[i] &lt;- year_numeric\n}\n  #Initialize a new character vector called measurement.\n  measurement &lt;- character(nrow(new_df))\n  #Loop through the time column of new_df and pulls strings 1-7.\nfor(i in seq_along(new_df$time)){\n  measurement_type &lt;- substr(new_df$time[i], 1, 7)\n  #Stores those values in measurement vector.\n  measurement[i] &lt;- measurement_type\n}\nnew_df |&gt;\n  #Adds columns for Year_Date and Measurement.\n  mutate(Year_Date = Year_Date,\n         Measurement = measurement) |&gt;\n  #Gets rid of the time column since that is no longer needed.\n  select(-time)\n}"
  },
  {
    "objectID": "Project1.html#step-5-function",
    "href": "Project1.html#step-5-function",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "This creates a function called add_state that first creates a character vector called state_name that is the length of the number of rows in the inputted data set. Then, it loops through the area_name column and creates a new vector called state_info that takes the area_name column and looks at the second to last string and the last string there. Then it stores each of these in the ith element of the state_name character vector initially created. It returns the initial data set with an added column called State.\n\nadd_state&lt;- function(input){\n  #Initalize character vector called state_name.\n  state_name &lt;- character(nrow(input))\n  #Loop through area_name column and extract last two strings.\n  for(i in seq_along(input$area_name)){\n    state_info &lt;- substr(input$area_name[i], \n                       nchar(input$area_name[i]) -1, \n                       nchar(input$area_name[i]))\n  #Store in state_name \n  state_name[i] &lt;- state_info\n  }\n  return(input |&gt;\n    #Add column corresponding to 2 character string of state name.\n    mutate(State = state_name))\n}"
  },
  {
    "objectID": "Project1.html#step-6-function",
    "href": "Project1.html#step-6-function",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "This function is called add_division. It takes the data_input and adds a column called Division. This uses a vectorized function ifelse to assign different states to different divisions. If the area_name doesn’t match any of the states (such as in the case of United States), it is denoted as error. Finally, it removes the extra DC rows.\n\nadd_division &lt;- function(data_input){\n  data_input &lt;- data_input |&gt;\n    #Add column corresponding to division.\n    mutate(Division = \n       ifelse(area_name %in% c(\"CONNECTICUT\", \"MAINE\", \"MASSACHUSETTS\", \"NEW HAMPSHIRE\", \"RHODE ISLAND\", \"VERMONT\"), \"New England\", \n        ifelse(area_name %in% c(\"NEW JERSEY\", \"NEW YORK\", \"PENNSYLVANIA\"), \"Middle Atlantic\",\n          ifelse(area_name %in% c(\"ILLINOIS\", \"INDIANA\", \"MICHIGAN\", \"OHIO\", \"WISCONSIN\"), \"East North Central\",\n            ifelse(area_name %in% c(\"IOWA\", \"KANSAS\", \"MINNESOTA\", \"MISSOURI\", \"NEBRASKA\", \"NORTH DAKOTA\", \"SOUTH DAKOTA\"), \"West North Central\",\n              ifelse(area_name %in% c(\"DELAWARE\", \"FLORIDA\", \"GEORGIA\", \"MARYLAND\", \"NORTH CAROLINA\", \"SOUTH CAROLINA\", \"VIRGINIA\", \"DISTRICT OF COLUMBIA\", \"District of Columbia\", \"WEST VIRGINIA\"), \"South Atlantic\",\n                ifelse(area_name %in% c(\"ALABAMA\", \"KENTUCKY\", \"MISSISSIPPI\", \"TENNESSEE\"), \"East South Central\",\n                  ifelse(area_name %in% c(\"ARKANSAS\", \"LOUISIANA\", \"OKLAHOMA\", \"TEXAS\"), \"West South Central\",\n                    ifelse(area_name %in% c(\"ARIZONA\", \"COLORADO\", \"IDAHO\", \"MONTANA\", \"NEVADA\", \"NEW MEXICO\", \"UTAH\", \"WYOMING\"), \"Mountain\",\n                      ifelse(area_name %in% c(\"ALASKA\", \"CALIFORNIA\", \"HAWAII\", \"OREGON\", \"WASHINGTON\"), \"Pacific\",\n                        \"Error\")))))))))) |&gt;\n  #Remove extra DC rows.\n  filter((area_name != \"District of Columbia\"))\n  \n  #Return the data input with the removed rows and the new Division column.\n  return(data_input)\n}"
  },
  {
    "objectID": "Project1.html#step-4-function-with-calling-steps-5-6-function",
    "href": "Project1.html#step-4-function-with-calling-steps-5-6-function",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "This function first creates a vector called county_indices that looks for the pattern such as Wake, NC where the first part corresponds to the county and the last two to the state. Then it filters to only look at the row numbers in the county indices and assigns that to a tibble called county_data. Finally it assigns a class called county. Then it applies the add_state function above to the county tibble to create a new tibble called add_state_info.\n\nget_new_tibbles &lt;- function(input_data){\n  #Create county_indices vector looking for pattern.\n  county_indices &lt;- grep(pattern = \", \\\\w\\\\w\", input_data$area_name)\n  \n  #Store as county data only those row numbers that follow pattern.\n  county_data &lt;- input_data |&gt;\n  filter(row_number() %in% county_indices)\n  \n  #Add a class called county.\n  class(county_data) &lt;- c(\"county\", class(county_data))\n\n  #Call add_state function (Step 5) \n  add_state_info &lt;-add_state(county_data)\n \n  #Store as non_county_data those row numbers that don't follow pattern above.\n  non_county_data &lt;- input_data |&gt;\n  filter(!row_number() %in% county_indices)\n\n  #Add a class called state.\n  class(non_county_data) &lt;- c(\"state\", class(non_county_data))\n\n  #Call add_division function.\n  add_division_info &lt;- add_division(non_county_data)\n\n#Return a list of two tibbles.\nreturn(list(\"County Data\" = add_state_info, \"Non-County Data\" = add_division_info))\n}"
  },
  {
    "objectID": "Project1.html#wrapper-function",
    "href": "Project1.html#wrapper-function",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "This creates the wrapper function called wrapper_function that has the default values argument of “Enrollment” and passes this argument to the tidy_data function. It calls each function in order and returns a list with the two tibbles.\n\nwrap_all &lt;- function(url, values = \"Enrollment\"){\n  result &lt;- read_csv(url) |&gt;\n    tidy_data(values) |&gt;\n    add_year() |&gt;\n    get_new_tibbles()\n}"
  },
  {
    "objectID": "Project1.html#call-the-functions.",
    "href": "Project1.html#call-the-functions.",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "Call the function for the A dataset and name it edu_a. Then print out the list of two tibbles for A. Call the function for the B dataset and name it edu_b. Then print out the list of two tibbles for B.\n\nedu_a &lt;- wrap_all(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\")\nedu_a\n\n$`County Data`\n# A tibble: 31,225 × 6\n   area_name   STCOU Enrollment Year_Date Measurement State\n   &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;\n 1 Autauga, AL 01001       6829      1987 EDU0101     AL   \n 2 Autauga, AL 01001       6900      1988 EDU0101     AL   \n 3 Autauga, AL 01001       6920      1989 EDU0101     AL   \n 4 Autauga, AL 01001       6847      1990 EDU0101     AL   \n 5 Autauga, AL 01001       7008      1991 EDU0101     AL   \n 6 Autauga, AL 01001       7137      1992 EDU0101     AL   \n 7 Autauga, AL 01001       7152      1993 EDU0101     AL   \n 8 Autauga, AL 01001       7381      1994 EDU0101     AL   \n 9 Autauga, AL 01001       7568      1995 EDU0101     AL   \n10 Autauga, AL 01001       7834      1996 EDU0101     AL   \n# ℹ 31,215 more rows\n\n$`Non-County Data`\n# A tibble: 520 × 6\n   area_name     STCOU Enrollment Year_Date Measurement Division\n   &lt;chr&gt;         &lt;chr&gt;      &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;   \n 1 UNITED STATES 00000   40024299      1987 EDU0101     Error   \n 2 UNITED STATES 00000   39967624      1988 EDU0101     Error   \n 3 UNITED STATES 00000   40317775      1989 EDU0101     Error   \n 4 UNITED STATES 00000   40737600      1990 EDU0101     Error   \n 5 UNITED STATES 00000   41385442      1991 EDU0101     Error   \n 6 UNITED STATES 00000   42088151      1992 EDU0101     Error   \n 7 UNITED STATES 00000   42724710      1993 EDU0101     Error   \n 8 UNITED STATES 00000   43369917      1994 EDU0101     Error   \n 9 UNITED STATES 00000   43993459      1995 EDU0101     Error   \n10 UNITED STATES 00000   44715737      1996 EDU0101     Error   \n# ℹ 510 more rows\n\nedu_b &lt;- wrap_all(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv\")\nedu_b\n\n$`County Data`\n# A tibble: 31,200 × 6\n   area_name   STCOU Enrollment Year_Date Measurement State\n   &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;\n 1 Autauga, AL 01001       8099      1997 EDU0101     AL   \n 2 Autauga, AL 01001       8211      1998 EDU0101     AL   \n 3 Autauga, AL 01001       8489      1999 EDU0101     AL   \n 4 Autauga, AL 01001       8912      2000 EDU0102     AL   \n 5 Autauga, AL 01001       8626      2001 EDU0102     AL   \n 6 Autauga, AL 01001       8762      2002 EDU0102     AL   \n 7 Autauga, AL 01001       9105      2003 EDU0152     AL   \n 8 Autauga, AL 01001       9200      2004 EDU0152     AL   \n 9 Autauga, AL 01001       9559      2005 EDU0152     AL   \n10 Autauga, AL 01001       9652      2006 EDU0152     AL   \n# ℹ 31,190 more rows\n\n$`Non-County Data`\n# A tibble: 519 × 6\n   area_name     STCOU Enrollment Year_Date Measurement Division\n   &lt;chr&gt;         &lt;chr&gt;      &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;   \n 1 UNITED STATES 00000   44534459      1997 EDU0101     Error   \n 2 UNITED STATES 00000   46245814      1998 EDU0101     Error   \n 3 UNITED STATES 00000   46368903      1999 EDU0101     Error   \n 4 UNITED STATES 00000   46818690      2000 EDU0102     Error   \n 5 UNITED STATES 00000   47127066      2001 EDU0102     Error   \n 6 UNITED STATES 00000   47606570      2002 EDU0102     Error   \n 7 UNITED STATES 00000   48506317      2003 EDU0152     Error   \n 8 UNITED STATES 00000   48693287      2004 EDU0152     Error   \n 9 UNITED STATES 00000   48978555      2005 EDU0152     Error   \n10 UNITED STATES 00000   49140702      2006 EDU0152     Error   \n# ℹ 509 more rows"
  },
  {
    "objectID": "Project1.html#combining-tibbles-function",
    "href": "Project1.html#combining-tibbles-function",
    "title": "ST 558 Project 1",
    "section": "Combining Tibbles Function",
    "text": "Combining Tibbles Function\nThis short function takes in the results of two calls of the wrapper function and combines the tibbles into the County Data and Non-County Data tibbles. It returns a list with the combined tibbles as the two list elements. The function is then called for the two output objects from the wrapper_function above.\n\ncombine_both &lt;- function(first_list, second_list){\n  #Combine the county tibbles.\n  combined_county &lt;- dplyr::bind_rows(first_list[[1]], second_list[[1]])\n  #Combine the non-county tibbles.\n  combined_non_county &lt;- dplyr::bind_rows(first_list[[2]], second_list[[2]])\n  \n  #Return a list of combined county data and non-county data.\n  return(list(\"County Data\" = combined_county, \"Non-County Data\" = combined_non_county))\n}\n\n#Call the function for the output objects from our wrapper_function. Print out the combined list.\ncombined_list &lt;- combine_both(edu_a,edu_b)\ncombined_list\n\n$`County Data`\n# A tibble: 62,425 × 6\n   area_name   STCOU Enrollment Year_Date Measurement State\n   &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;\n 1 Autauga, AL 01001       6829      1987 EDU0101     AL   \n 2 Autauga, AL 01001       6900      1988 EDU0101     AL   \n 3 Autauga, AL 01001       6920      1989 EDU0101     AL   \n 4 Autauga, AL 01001       6847      1990 EDU0101     AL   \n 5 Autauga, AL 01001       7008      1991 EDU0101     AL   \n 6 Autauga, AL 01001       7137      1992 EDU0101     AL   \n 7 Autauga, AL 01001       7152      1993 EDU0101     AL   \n 8 Autauga, AL 01001       7381      1994 EDU0101     AL   \n 9 Autauga, AL 01001       7568      1995 EDU0101     AL   \n10 Autauga, AL 01001       7834      1996 EDU0101     AL   \n# ℹ 62,415 more rows\n\n$`Non-County Data`\n# A tibble: 1,039 × 6\n   area_name     STCOU Enrollment Year_Date Measurement Division\n   &lt;chr&gt;         &lt;chr&gt;      &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;   \n 1 UNITED STATES 00000   40024299      1987 EDU0101     Error   \n 2 UNITED STATES 00000   39967624      1988 EDU0101     Error   \n 3 UNITED STATES 00000   40317775      1989 EDU0101     Error   \n 4 UNITED STATES 00000   40737600      1990 EDU0101     Error   \n 5 UNITED STATES 00000   41385442      1991 EDU0101     Error   \n 6 UNITED STATES 00000   42088151      1992 EDU0101     Error   \n 7 UNITED STATES 00000   42724710      1993 EDU0101     Error   \n 8 UNITED STATES 00000   43369917      1994 EDU0101     Error   \n 9 UNITED STATES 00000   43993459      1995 EDU0101     Error   \n10 UNITED STATES 00000   44715737      1996 EDU0101     Error   \n# ℹ 1,029 more rows"
  },
  {
    "objectID": "Project1.html#plot.state-function",
    "href": "Project1.html#plot.state-function",
    "title": "ST 558 Project 1",
    "section": "plot.state Function",
    "text": "plot.state Function\nThis function plots the mean values of enrollment by year for each Division, after removing the Divisions with Error values. First, the function filters to remove the Division of “Error”. Then, it groups the tibble’s summary statistics by Division and Year_Date. Finally, it gets the mean of each division and year and then plots them with the x axis representing the year and the y axis representing the Mean Enrollment (or other variable denoted by the values argument).\n\nplot.state &lt;- function(df, values = \"Enrollment\"){\n  G &lt;- ggplot(df |&gt; \n    #Remove the \"ERROR\" Division values\n    filter(Division != \"Error\") |&gt;\n    #Group by division & year and then se get function to reference values variable.\n    group_by(Division, Year_Date) |&gt;\n    summarize(\"mean_data\" = mean(get(values))),\n    #Add global aesthetics.\n    aes(x = Year_Date, y = mean_data, color = Division, linetype = Division))\n  #Create a line plot. Have the y axis label & title dynamically generate based on values column.\n  G + geom_line() + labs(x = \"Year\", y = paste(\"Mean\", values), title = paste(\"Mean\",values, \"by Division over Time\"))\n}"
  },
  {
    "objectID": "Project1.html#plot.county-function",
    "href": "Project1.html#plot.county-function",
    "title": "ST 558 Project 1",
    "section": "plot.county Function",
    "text": "plot.county Function\nThis function will take in a tibble/data frame, along with a specific state (specified with a 2-character string), a choice of whether we want the areas with the highest enrollment or lowest, and how many of these areas we want to see. Use a right join to match up the top averages with the original values to plot over time.\n\nplot.county &lt;- function(df, values = \"Enrollment\", input_state = \"NC\", choice = \"top\", num_obs = 5){\n  #Use if/else based on choice argument.\n  if (choice == \"top\"){\n    new_df &lt;- df |&gt;\n       #Filter the data to only include observations from the state specified\n      filter(State == input_state) |&gt;\n       #Find the mean enrollment for each area_name and sort these values in descending order\n      group_by(area_name) |&gt;\n      summarize(\"mean_enrollment\" = mean(get(values))) |&gt;\n      arrange(desc(mean_enrollment)) |&gt;\n      #Obtain the top/bottom x number of area_name's depending on num_obs input \n      head(n = num_obs)\n  } else if (choice == \"bottom\") {\n    new_df &lt;- df |&gt;\n     #Filter the data to only include observations from the state specified\n    filter(State == input_state) |&gt;\n     #Find the mean enrollment for each Area_name and sort these values in ascending order\n    group_by(area_name) |&gt;\n    summarize(\"mean_enrollment\" = mean(get(values))) |&gt;\n    arrange(mean_enrollment) |&gt;\n    #Obtain the top/bottom x number of area_name's depending on num_obs input \n    head(n = num_obs)\n  } else {\n    #Provide error message if user doesn't use top or bottom.\n    paste(\"Error - choice input was not either 'top' or 'bottom'\")\n  }\n  \n  #Use a right join to join together all observations from new_df and matching observations of df. \n  #Join by area_name column.\n  joined_data &lt;- right_join(df, new_df, by = \"area_name\")\n  \n#Dynamically create title based on inputted arguments.\ntitle &lt;- paste(\"Mean\", values, \"by year for\", choice, num_obs, input_state, \"counties\")\n\n#Create plotting instance and assign global aesthetics.\ng &lt;- ggplot(joined_data, aes(x= Year_Date, y= get(values), group = area_name, color = area_name))\n\ng + geom_line() +\n  #Add a labs layer with title and axis labels. \n  labs(title = title, x = \"Year\", y = paste(\"Mean \", values), color = \"County Name\") +\n  #Decrease legend size to fit 20 counties in later section.\n  theme(legend.key.size = unit(0.5, \"cm\"))\n}"
  }
]